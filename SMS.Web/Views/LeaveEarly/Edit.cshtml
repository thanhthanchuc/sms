@model SMS.Models.EF.Leave_Early

@{
    ViewBag.Title = "Sửa yêu cầu về sớm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles{
    <link href="~/Assets/css/jquery.timepicker.min.css" rel="stylesheet" />
    <link href="~/Assets/css/jquery-confirm.css" rel="stylesheet" />
}

@using (Html.BeginForm("Edit", "LeaveEarly", FormMethod.Post))
{
    <div class="card-header">
        <h5 class="m-0 font-weight-bold text-primary">CHỈNH SỬA VỀ SỚM</h5>
    </div>

    <div class="col-12 row-form input-group">
        <a class="btn btn-primary btn-sm" style="cursor: pointer" data-toggle="collapse" data-target=".file"><i class="fas fa-users"></i> Đăng ký nhiều người</a>
    </div>

    <div class="col-md-12 row-form file collapse form-horizontal">
        <div class="form-horizontal form-left col-md-7">
            <div class=" col-12 input-group row-1">
                <a class="btn btn-success" style="cursor: pointer"><i class="fas fa-download"></i> Tải mẫu đăng ký</a>
                &nbsp;
                <div class="custom-file">
                    <input class="form-control input-previous-button custom-file-input input-group-sm" id="temp-file" type="file" />
                    <label class="custom-file-label" for="temp-file">Chọn file</label>
                </div>
            </div>
            <div class="form-group input-group input-group-sm">
                <div class="col-2">
                    <button type="submit" class="btn btn-sm btn-primary" title="Thêm mới yêu cầu"><i class="fas fa-edit"></i> Cập nhật</button>
                </div>
            </div>
        </div>
    </div>
    <div class="form-main">
        @Html.AntiForgeryToken()
        <div style="height: 5px"></div>
        <div class="validation-top alert-danger">
            @Html.ValidationSummary(true, "", new { @style = "color: red; list-style-type: none" })
        </div>

        <div class="form-horizontal">
            <!--Cột bên trái dành cho form đăng ký-->
            <div class="col-md-12 row-form">
                <div class="form-horizontal form-left col-md-7">
                    <div class="form-group row-1 input-group">
                        <label class="control-label col-md-2 lb">Mã CNV <span class="red">(*)</span></label>
                        <div class="col-md-3 input-group input-group-sm">
                            @Html.EditorFor(model => model.EmpCode, new { htmlAttributes = new { maxlength = "8", @id = "txtEmpCodeLE", @class = "form-control input-previous-button", @readonly = "readonly" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.EmpCode, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group input-group">
                        @Html.LabelFor(model => model.Shift, "Ca", htmlAttributes: new { @class = "control-label col-md-2 top-space" })
                        <div class="col-md-3 input-group-sm">
                            @Html.DropDownListFor(model => model.Shift, new List<SelectListItem>()
                            {
                               new SelectListItem(){Selected = true, Text = "Hành chính", Value="0"},
                               new SelectListItem(){Text = "1", Value="1"},
                               new SelectListItem(){Text = "2", Value="2"},
                               new SelectListItem(){Text = "3", Value="3"}
                            }, new { @class = "form-control input-previous-button" })
                        </div>
                    </div>

                    <div class="form-group input-group">
                        @Html.LabelFor(model => model.Purpose, "Mục đích", htmlAttributes: new { @class = "control-label col-md-2 top-space" })
                        <div class="col-md-3 input-group-sm">
                            @Html.DropDownListFor(model => model.Purpose, new List<SelectListItem>()
                            {
                               new SelectListItem(){Selected = true, Text = "Công việc", Value="true"},
                               new SelectListItem(){Text = "Cá nhân", Value="false"}
                            }, new { @class = "form-control input-previous-button" })
                        </div>
                    </div>

                    <div class="form-group input-group">
                        <label class="control-label col-md-2 top-space">Lý do <span class="red">(*)</span></label>
                        <div class="col-md-10 input-group-sm">
                            @Html.TextAreaFor(model => model.Reason, htmlAttributes: new { @class = "form-control col-md-12" })
                            @Html.ValidationMessageFor(model => model.Reason, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group input-group specific-date-pick">
                        <label class="col-2 top-space" for="EstimatedDate">Ngày đăng ký <span class="red">(*)</span></label>
                        <div class="col-3 input-group-sm">
                            @Html.EditorFor(model => model.EstimatedDate, new { htmlAttributes = new { @id = "estimated_date", @class = "form-control input-previous-button", autocomplete = "off", @style = "background-color: white" } })
                        </div>
                        <label class="top-space" for="EstimatedTime">Giờ đăng ký <span class="red">(*)</span></label>
                        <div class="col-2 input-group-sm">
                            @Html.EditorFor(model => model.EstimatedTime, new { htmlAttributes = new { @id = "estimated_time", @class = "form-control input-previous-button", @type = "time" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.EstimatedDate, "", new { @class = "text-danger" })
                        @Html.ValidationMessageFor(model => model.EstimatedTime, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group input-group input-group-sm" style="display:flex">
                        <div class="col-2"></div>
                        <div class="col-2">
                            <button type="submit" class="btn btn-sm btn-primary" title="Chỉnh sửa yêu cầu" value="Edit"><i class="fas fa-edit"></i> Cập nhật</button>
                        </div>
                    </div>
                </div>

                <div class="column col-md-1 col-mid"></div>

                <!--Cột bên phải dành cho thông tin nhân viên-->
                <div class="column form-horizontal form-right col-md-4">
                    <!--Ảnh profile-->
                    <div class="form-group col-12 profile-img">
                        <div class="img-profile">
                            <img src="~/Assets/img/the-world.jpg" />
                        </div>
                    </div>
                    <!--Thông tin profile-->
                    <div class="form-group input-group profile">
                        <label class="control-label col-md-3">Họ và tên</label>
                        <div class="input-group-sm col-9">
                            @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control input-previous-button", @id = "txtFullNameLE" } })
                        </div>

                    </div>
                    <div class="form-group input-group profile">
                        <label class="control-label col-md-3">Vị trí</label>
                        <div class="input-group-sm col-9">
                            @Html.EditorFor(model => model.Position, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control input-previous-button", @id = "txtPositionLE" } })
                        </div>
                    </div>
                    <div class="form-group input-group profile">
                        <label class="control-label col-md-3">Team</label>
                        <div class="input-group-sm col-9">
                            @Html.EditorFor(model => model.Team, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control input-previous-button", @id = "txtTeamLE" } })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <br />

    <div class="note col-12">
        <span class="control-label" style="color: dodgerblue"><u>Lưu ý</u>: <span style="color: #858796">&nbsp;Các trường <span style="color:red">(*)</span> bắt buộc phải nhập đầy đủ.</span></span>
    </div>
}

@section scripts{
    <script src="~/Assets/js/jquery.timepicker.min.js"></script>
    <script src="~/Assets/js/jquery-confirm.js"></script>
    <script>
        var _userLE = {
            init: function () {
                _userLE.registerEvent();
            },
            registerEvent: function () {
                $("#info-LE-create").click(function () {
                    _userLE.getUserLE();
                });
            },
            getUserLE: function () {
                var empCode = $("#txtEmpCodeLE").val();
                $.ajax({
                    url: '/User/GetUserByCode?empCode=' + empCode,
                    type: "GET",
                    dataType: 'json',
                    success: function (reponse) {
                        console.log(reponse.data);
                        if (reponse.status) {
                            $('#txtFullNameLE').val(reponse.data.FullName);
                            $('#txtPositionLE').val(reponse.data.Position);
                            $('#txtTeamLE').val(reponse.data.Team.Name);
                        } else {
                            alert("Mã nhân viên không tồn tại");
                            $('#txtFullNameLE').val("");
                            $('#txtPositionLE').val(reponse.data.Position);
                            $('#txtTeamLE').val(reponse.data.Team.Name);
                            console.log(reponse.data.data);
                        }
                    },
                    error: function () {
                        $('#txtFullNameLE').val("Không tồn tại");
                        $('#txtPositionLE').val("?");
                        $('#txtTeamLE').val("?");
                        console.log(reponse.data.data);
                    }
                });
            }
        }
        _userLE.init();

        $('#txtEmpCodeLE').keyup(function () {
            var count = $('#txtEmpCodeLE').val().length;
            if (count == 8) {
                _userLE.getUserLE();
            } else {
                $('#txtFullNameLE').val("");
                $('#txtPositionLE').val("");
                $('#txtTeamLE').val("");
            }
        });

        $('#estimated_date, #date_from, #date_to').datepicker({
            dateFormat: 'dd/mm/yy'
        });

        //$('.timepicker, #estimated_time').timepicker({
        //    timeFormat: 'h:mm p',
        //    interval: 5,
        //    startTime: '00:00',
        //    dynamic: false,
        //    dropdown: true,
        //    scrollbar: true
        //});

        $("#LE").removeClass('collapse');
        $("#LE").removeClass('collapsed');
        $("#LE").attr("aria-expanded", "true");
        $("#LEHistory").addClass('active');
        $("#collapseLeaveEarly").addClass('show');
        $("#collapseInOut").removeClass('collapse');
    </script>
}